const fetch = require('node-fetch');

// Store active temp emails (in production, you'd want to use a database)
const activeTempEmails = new Map();

async function tempmailCommand(sock, chatId, message, args) {
    try {
        const command = args[0]?.toLowerCase();

        switch (command) {
            case 'generate':
            case 'gen':
                await generateTempEmail(sock, chatId, message);
                break;
            case 'inbox':
                await checkInbox(sock, chatId, message, args[1]);
                break;
            case 'read':
                await readMessage(sock, chatId, message, args[1], args[2]);
                break;
            case 'list':
                await listActiveEmails(sock, chatId, message);
                break;
            default:
                await showHelp(sock, chatId, message);
                break;
        }
    } catch (error) {
        console.error('Error in tempmail command:', error);
        await sock.sendMessage(chatId, {
            text: `❌ *Temp Email Error*\n\n*Error:* ${error.message}\n\nPlease try again later.`
        }, { quoted: message });
    }
}

async function generateTempEmail(sock, chatId, message) {
    try {
        await sock.sendMessage(chatId, {
            text: '🔄 Generating temporary email address...'
        }, { quoted: message });

        const response = await fetch('https://api.giftedtech.web.id/api/tempmail/generate?apikey=gifted');

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        if (!data.success || !data.result?.email) {
            throw new Error('Failed to generate email address');
        }

        const email = data.result.email;
        const userId = message.key.participant || message.key.remoteJid;

        // Store the email for this user
        activeTempEmails.set(userId, {
            email: email,
            createdAt: new Date(),
            lastChecked: null
        });

        const emailMessage = `📧 *TEMPORARY EMAIL GENERATED* 📧\n\n`;
        const formattedMessage = emailMessage +
            `✉️ *Email:* \`${email}\`\n\n` +
            `⏰ *Expires:* 10 minutes\n` +
            `📝 *Note:* ${data.result.message}\n\n` +
            `🔧 *Commands:*\n` +
            `• \`.tempmail inbox\` - Check inbox\n` +
            `• \`.tempmail list\` - Show your emails\n\n` +
            `⚡ Generated by GiftedTech API`;

        const buttons = [
            { buttonId: '.tempmail inbox', buttonText: { displayText: '📬 Check Inbox' }, type: 1 },
            { buttonId: '.tempmail gen', buttonText: { displayText: '🔄 New Email' }, type: 1 }
        ];

        await sock.sendMessage(chatId, {
            text: formattedMessage,
            buttons: buttons,
            headerType: 1
        }, { quoted: message });

    } catch (error) {
        throw new Error(`Failed to generate email: ${error.message}`);
    }
}

async function checkInbox(sock, chatId, message, customEmail) {
    try {
        const userId = message.key.participant || message.key.remoteJid;
        let emailToCheck = customEmail;

        if (!emailToCheck) {
            const userEmail = activeTempEmails.get(userId);
            if (!userEmail) {
                await sock.sendMessage(chatId, {
                    text: '❌ No active temp email found. Generate one first with `.tempmail generate`'
                }, { quoted: message });
                return;
            }
            emailToCheck = userEmail.email;
        }

        await sock.sendMessage(chatId, {
            text: `🔄 Checking inbox for ${emailToCheck}...`
        }, { quoted: message });

        const response = await fetch(`https://api.giftedtech.web.id/api/tempmail/inbox?apikey=gifted&email=${encodeURIComponent(emailToCheck)}`);

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        if (!data.success) {
            throw new Error('Failed to check inbox');
        }

        // Update last checked time
        if (activeTempEmails.has(userId)) {
            activeTempEmails.get(userId).lastChecked = new Date();
        }

        if (data.message && data.message.includes('No Emails Received Yet')) {
            const noMailMessage = `📬 *INBOX EMPTY* 📬\n\n` +
                `✉️ *Email:* \`${emailToCheck}\`\n` +
                `📭 *Status:* No emails received yet\n\n` +
                `💡 *Tip:* Send a test email and wait 10 seconds before checking again\n\n` +
                `⏰ Last checked: ${new Date().toLocaleTimeString()}`;

            const buttons = [
                { buttonId: '.tempmail inbox', buttonText: { displayText: '🔄 Refresh Inbox' }, type: 1 },
                { buttonId: '.tempmail gen', buttonText: { displayText: '📧 New Email' }, type: 1 }
            ];

            await sock.sendMessage(chatId, {
                text: noMailMessage,
                buttons: buttons,
                headerType: 1
            }, { quoted: message });
        } else if (data.result && Array.isArray(data.result)) {
            let inboxMessage = `📬 *INBOX - ${data.result.length} MESSAGE(S)* 📬\n\n`;
            inboxMessage += `✉️ *Email:* \`${emailToCheck}\`\n\n`;

            data.result.forEach((email, index) => {
                inboxMessage += `*${index + 1}.* ${email.subject || 'No Subject'}\n`;
                inboxMessage += `   👤 From: ${email.from || 'Unknown'}\n`;
                inboxMessage += `   📅 Date: ${email.date || 'Unknown'}\n`;
                if (email.messageId) {
                    inboxMessage += `   🆔 ID: \`${email.messageId}\`\n`;
                }
                inboxMessage += `\n`;
            });

            inboxMessage += `🔧 *Commands:*\n`;
            inboxMessage += `• \`.tempmail read <messageId>\` - Read message\n`;
            inboxMessage += `• \`.tempmail inbox\` - Refresh inbox\n\n`;
            inboxMessage += `⏰ Last checked: ${new Date().toLocaleTimeString()}`;

            const buttons = [
                { buttonId: '.tempmail inbox', buttonText: { displayText: '🔄 Refresh' }, type: 1 },
                { buttonId: '.tempmail gen', buttonText: { displayText: '📧 New Email' }, type: 1 }
            ];

            await sock.sendMessage(chatId, {
                text: inboxMessage,
                buttons: buttons,
                headerType: 1
            }, { quoted: message });
        }

    } catch (error) {
        throw new Error(`Failed to check inbox: ${error.message}`);
    }
}

async function readMessage(sock, chatId, message, messageId, customEmail) {
    try {
        if (!messageId) {
            await sock.sendMessage(chatId, {
                text: '❌ Please provide a message ID. Use `.tempmail inbox` to see message IDs.'
            }, { quoted: message });
            return;
        }

        const userId = message.key.participant || message.key.remoteJid;
        let emailToUse = customEmail;

        if (!emailToUse) {
            const userEmail = activeTempEmails.get(userId);
            if (!userEmail) {
                await sock.sendMessage(chatId, {
                    text: '❌ No active temp email found. Please specify email or generate one first.'
                }, { quoted: message });
                return;
            }
            emailToUse = userEmail.email;
        }

        await sock.sendMessage(chatId, {
            text: `🔄 Reading message ${messageId}...`
        }, { quoted: message });

        const response = await fetch(`https://api.giftedtech.web.id/api/tempmail/message?apikey=gifted&email=${encodeURIComponent(emailToUse)}&messageid=${encodeURIComponent(messageId)}`);

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        if (!data.success) {
            throw new Error('Failed to read message');
        }

        const messageData = data.result;
        let readMessage = `📧 *EMAIL MESSAGE* 📧\n\n`;
        readMessage += `✉️ *To:* \`${emailToUse}\`\n`;
        readMessage += `👤 *From:* ${messageData.from || 'Unknown'}\n`;
        readMessage += `📋 *Subject:* ${messageData.subject || 'No Subject'}\n`;
        readMessage += `📅 *Date:* ${messageData.date || 'Unknown'}\n\n`;
        readMessage += `📝 *Content:*\n${messageData.body || messageData.text || 'No content available'}\n\n`;
        readMessage += `🆔 *Message ID:* \`${messageId}\``;

        const buttons = [
            { buttonId: '.tempmail inbox', buttonText: { displayText: '📬 Back to Inbox' }, type: 1 },
            { buttonId: '.tempmail gen', buttonText: { displayText: '📧 New Email' }, type: 1 }
        ];

        await sock.sendMessage(chatId, {
            text: readMessage,
            buttons: buttons,
            headerType: 1
        }, { quoted: message });

    } catch (error) {
        throw new Error(`Failed to read message: ${error.message}`);
    }
}

async function listActiveEmails(sock, chatId, message) {
    try {
        const userId = message.key.participant || message.key.remoteJid;
        const userEmail = activeTempEmails.get(userId);

        if (!userEmail) {
            await sock.sendMessage(chatId, {
                text: '📭 No active temporary emails found.\n\nUse `.tempmail generate` to create one.'
            }, { quoted: message });
            return;
        }

        const timeSinceCreated = Math.floor((new Date() - userEmail.createdAt) / 1000 / 60);
        const timeLeft = Math.max(0, 10 - timeSinceCreated);

        let listMessage = `📧 *YOUR TEMP EMAILS* 📧\n\n`;
        listMessage += `✉️ *Email:* \`${userEmail.email}\`\n`;
        listMessage += `📅 *Created:* ${userEmail.createdAt.toLocaleTimeString()}\n`;
        listMessage += `⏰ *Time Left:* ${timeLeft} minutes\n`;
        if (userEmail.lastChecked) {
            listMessage += `🔍 *Last Checked:* ${userEmail.lastChecked.toLocaleTimeString()}\n`;
        }
        listMessage += `\n🔧 *Quick Actions:*\n`;
        listMessage += `• \`.tempmail inbox\` - Check inbox\n`;
        listMessage += `• \`.tempmail generate\` - New email`;

        const buttons = [
            { buttonId: '.tempmail inbox', buttonText: { displayText: '📬 Check Inbox' }, type: 1 },
            { buttonId: '.tempmail gen', buttonText: { displayText: '🔄 New Email' }, type: 1 }
        ];

        await sock.sendMessage(chatId, {
            text: listMessage,
            buttons: buttons,
            headerType: 1
        }, { quoted: message });

    } catch (error) {
        throw new Error(`Failed to list emails: ${error.message}`);
    }
}

async function showHelp(sock, chatId, message) {
    const helpMessage = `📧 *TEMP EMAIL COMMANDS* 📧\n\n` +
        `🔧 *Available Commands:*\n\n` +
        `• \`.tempmail generate\` or \`.tempmail gen\`\n` +
        `  Generate a new temporary email\n\n` +
        `• \`.tempmail inbox [email]\`\n` +
        `  Check inbox (uses your active email if no email specified)\n\n` +
        `• \`.tempmail read <messageId> [email]\`\n` +
        `  Read a specific message\n\n` +
        `• \`.tempmail list\`\n` +
        `  Show your active temporary emails\n\n` +
        `⚠️ *Note:* Emails expire after 10 minutes\n` +
        `⚡ Powered by GiftedTech API`;

    const buttons = [
        { buttonId: '.tempmail generate', buttonText: { displayText: '📧 Generate Email' }, type: 1 },
        { buttonId: '.help', buttonText: { displayText: '📋 Main Help' }, type: 1 }
    ];

    await sock.sendMessage(chatId, {
        text: helpMessage,
        buttons: buttons,
        headerType: 1
    }, { quoted: message });
}

module.exports = tempmailCommand;
