/*
QR Code Generator and Scanner Command
Supports both generating QR codes from text and scanning QR codes from images
*/

const QRCode = require('qrcode');
const jimp = require('jimp');
const jsQR = require('jsqr');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

async function qrCommand(sock, chatId, message) {
    try {
        const text = message.message?.conversation || message.message?.extendedTextMessage?.text;
        const args = text.split(' ').slice(1);
        const command = args[0]?.toLowerCase();

        if (!command || (command !== 'generate' && command !== 'scan')) {
            const helpText = `*QR Code Generator & Scanner*

*Commands:*
‚Ä¢ \`.qr generate <text>\` - Generate QR code from text
‚Ä¢ \`.qr scan\` - Reply to an image to scan QR code

*Examples:*
‚Ä¢ \`.qr generate Hello World\`
‚Ä¢ \`.qr generate https://github.com\`
‚Ä¢ \`.qr scan\` (reply to image containing QR code)

*Features:*
‚úÖ Generate QR codes from any text
‚úÖ Scan QR codes from images
‚úÖ Support for URLs, text, and more
‚úÖ High-quality PNG output`;

            return await sock.sendMessage(chatId, { text: helpText });
        }

        // QR Code Generator
        if (command === 'generate') {
            const textToEncode = args.slice(1).join(' ').trim();
            
            if (!textToEncode) {
                return await sock.sendMessage(chatId, { 
                    text: "‚ùå Please provide text to generate QR code!\n\nExample: `.qr generate Hello World`" 
                });
            }

            try {
                // Show generating message
                await sock.sendMessage(chatId, { 
                    text: "üîÑ Generating QR code..." 
                }, { quoted: message });

                // Generate QR code
                const qrBuffer = await QRCode.toBuffer(textToEncode, {
                    errorCorrectionLevel: 'M',
                    type: 'png',
                    quality: 0.92,
                    margin: 1,
                    color: {
                        dark: '#000000',
                        light: '#FFFFFF'
                    },
                    width: 512
                });

                // Save temporarily
                const tempDir = path.join(__dirname, '../temp');
                if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir);
                const tempFile = path.join(tempDir, `qr_${Date.now()}.png`);
                fs.writeFileSync(tempFile, qrBuffer);

                // Send QR code
                await sock.sendMessage(chatId, {
                    image: { url: tempFile },
                    caption: `*QR Code Generated Successfully!* ‚úÖ\n\nüìù *Content:* ${textToEncode}\n\n> _Generated by Knight Bot MD_`
                }, { quoted: message });

                // Clean up temp file
                setTimeout(() => {
                    try {
                        if (fs.existsSync(tempFile)) fs.unlinkSync(tempFile);
                    } catch {}
                }, 10000);

            } catch (error) {
                console.error('QR Generation Error:', error);
                await sock.sendMessage(chatId, { 
                    text: "‚ùå Failed to generate QR code. Please try again." 
                });
            }
        }

        // QR Code Scanner
        else if (command === 'scan') {
            const quotedMessage = message.message?.extendedTextMessage?.contextInfo?.quotedMessage;
            
            if (!quotedMessage) {
                return await sock.sendMessage(chatId, { 
                    text: "‚ùå Please reply to an image containing a QR code!\n\nExample: Reply to an image with `.qr scan`" 
                });
            }

            let imageMessage = null;
            
            // Check different image message types
            if (quotedMessage.imageMessage) {
                imageMessage = quotedMessage.imageMessage;
            } else if (quotedMessage.viewOnceMessage?.message?.imageMessage) {
                imageMessage = quotedMessage.viewOnceMessage.message.imageMessage;
            }

            if (!imageMessage) {
                return await sock.sendMessage(chatId, { 
                    text: "‚ùå The replied message doesn't contain an image!" 
                });
            }

            try {
                // Show scanning message
                await sock.sendMessage(chatId, { 
                    text: "üîç Scanning QR code..." 
                }, { quoted: message });

                // Download the image
                const imageBuffer = await sock.downloadMediaMessage({
                    message: { imageMessage }
                });

                if (!imageBuffer) {
                    return await sock.sendMessage(chatId, { 
                        text: "‚ùå Failed to download the image!" 
                    });
                }

                // Process image with jimp
                const image = await jimp.read(imageBuffer);
                const { data, width, height } = image.bitmap;

                // Convert to the format jsQR expects (RGBA)
                const code = jsQR(data, width, height);

                if (code) {
                    const qrData = code.data;
                    let responseText = `*QR Code Scanned Successfully!* ‚úÖ\n\n`;
                    responseText += `üìù *Content:* ${qrData}\n\n`;
                    
                    // Detect content type
                    if (qrData.startsWith('http://') || qrData.startsWith('https://')) {
                        responseText += `üîó *Type:* URL/Website Link\n`;
                        responseText += `üåê *Preview:* ${qrData}\n\n`;
                    } else if (qrData.includes('@') && qrData.includes('.')) {
                        responseText += `üìß *Type:* Email Address\n\n`;
                    } else if (qrData.startsWith('tel:')) {
                        responseText += `üìû *Type:* Phone Number\n\n`;
                    } else if (qrData.startsWith('wifi:')) {
                        responseText += `üì∂ *Type:* WiFi Configuration\n\n`;
                    } else if (qrData.startsWith('geo:')) {
                        responseText += `üìç *Type:* Geographic Location\n\n`;
                    } else {
                        responseText += `üìÑ *Type:* Plain Text\n\n`;
                    }
                    
                    responseText += `> _Scanned by Knight Bot MD_`;

                    await sock.sendMessage(chatId, { text: responseText });

                } else {
                    await sock.sendMessage(chatId, { 
                        text: "‚ùå No QR code found in the image!\n\nüí° *Tips:*\n‚Ä¢ Make sure the QR code is clear and visible\n‚Ä¢ Try a higher quality image\n‚Ä¢ Ensure good lighting in the photo" 
                    });
                }

            } catch (error) {
                console.error('QR Scanning Error:', error);
                await sock.sendMessage(chatId, { 
                    text: "‚ùå Failed to scan QR code. Please try with a clearer image." 
                });
            }
        }

    } catch (error) {
        console.error('QR Command Error:', error);
        await sock.sendMessage(chatId, { 
            text: "‚ùå An error occurred while processing your request. Please try again." 
        });
    }
}

module.exports = qrCommand;
